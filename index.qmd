---
title: "Systematic data validation with the validate package"
format: html
editor: source
---

```{r}
#| label: setup
library(validate)
library(dplyr)
data(SBS2000)
```

Walktrough of userR2021 data validation workshop exercises. 

# Part 1 Writing rules inline

## Assignment 1. Study the SBS2000 data set

```{r}
head(SBS2000)
```
```{r}
summary(SBS2000)
```




## Assignment 2: Check basic validation rules

```{r}
rules <- validator(
  staff >= 0,
  turnover >= 0,
  other.rev >= 0,
  turnover + other.rev == total.rev,
  if (staff > 0) staff.costs >=0
)
```

```{r}
rules
```
So, we have created five rules, V1-V5.

Confront data with the rules

```{r}
result <- confront(SBS2000, rules, key="id")
```

```{r}
result
```
Summarize the result and study the output

```{r}
summary(result)
```
```{r}
#| label: plot-the-result

plot(result)
```
Rules V3 and V4 fail in five cases total, so there are cases where revenue is negative.

Let's turn the results to a data frame

```{r}
df <- as.data.frame(result)
```

```{r}
knitr::kable(df %>% slice_sample(n=20))
```

```{r}
# what does this function return?
x <- violating(SBS2000, result)
x
```

Function returns all cases in data which failed in validation.

# Part 2: Reading rules from the file

Load sample rules from workshop materials.
```{r}
file_rules <- validator(.file = "code/SBS2000_rules.R")
```
```{r}
file_rules
```


Now we have added new roles to the ruleset so let's check our data using them.

```{r}
result <- confront(SBS2000, file_rules, key="id")
```
```{r}
summary(result)
```
```{r}
plot(result)
```



## Automating data quality measurement with lumberjack



## Managing data validation rules
