---
title: "Systematic data validation with the validate package"
format: html
editor: source
---

```{r}
#| label: setup
library(validate)
library(dplyr)
data(SBS2000)
```

Walktrough of userR2021 data validation workshop exercises.

# Part 1 Writing rules inline

## Assignment 1. Study the SBS2000 data set

```{r}
head(SBS2000)
```

```{r}
summary(SBS2000)
```

## Assignment 2: Check basic validation rules

```{r}
rules <- validator(
  staff >= 0,
  turnover >= 0,
  other.rev >= 0,
  turnover + other.rev == total.rev,
  if (staff > 0) staff.costs >=0
)
```

```{r}
rules
```

So, we have created five rules, V1-V5.

Confront data with the rules

```{r}
result <- confront(SBS2000, rules, key="id")
```

```{r}
result
```

Summarize the result and study the output

```{r}
summary(result)
```

```{r}
#| label: plot-the-result

plot(result)
```

Rules V3 and V4 fail in five cases total, so there are cases where revenue is negative.

Let's turn the results to a data frame

```{r}
df <- as.data.frame(result)
```

```{r}
knitr::kable(df %>% slice_sample(n=20))
```

```{r}
# what does this function return?
x <- violating(SBS2000, result)
x
```

Function returns all cases in data which failed in validation.

# Reading rules from the file

Load sample rules from workshop materials.

```{r}
file_rules <- validator(.file = "code/SBS2000_rules.R")
```

```{r}
file_rules
```

Now we have added new roles to the ruleset so let's check our data using them.

```{r}
result <- confront(SBS2000, file_rules, key="id")
```

```{r}
summary(result)
```

```{r}
plot(result)
```

# Part 2: Variable checks

## Assignment 3: Data checking

This is the rule we are given in the assignment brief.

```{r}
rules <- validator(
  is.numeric(turnover)
)
out <- confront(SBS2000, rules)
summary(out)
```

We must modify it to check if the size is text variable and and staff is interger.

```{r}
rules <- validator(
  is.character(size),
  is.integer(staff)
)
out <- confront(SBS2000, rules)
summary(out)
```

Validation rule V1 fails because in the data, variable size is numeric.

Create a rules object using is.na() to check missing items in turnover and profit. confront the rules with SBS2000 and summarize the results.

```{r}
rules <- validator(
  !is.na(turnover),
  !is.na(profit)
)
out <- confront(SBS2000, rules)
summary(out)
```

There are 4 cases where turnover is missing and 5 cases in profit.

Create a rules object using field_length (or nchar) to check that

-   size has at least 2 characters.
-   codes have exactly 5 characters.
-   size has at least 2 and at most 3 characters.

```{r}
rules <- validator(
  field_length(size,min = 2, max=Inf),
  field_length(id, n = 5),
  field_length(size, min = 2, max = 3)
)
out <- confront(SBS2000, rules)
summary(out)

```

All tests pass

### Exercise 2

Create a rule set where you test whether id is complete.

```{r}
rules <- validator(
  is_complete(id)
)

out <- confront(SBS2000, rules)
summary(out)
```

Create a rules set where you test whether the combination id and turnover is complete.

```{r}
rules <- validator(
  is_complete(id,turnover)
)

out <- confront(SBS2000, rules)
summary(out)
```

Check if profit is total revue minus total costs.

```{r}
rules <- validator(
  profit == total.rev - total.costs
)

out <- confront(SBS2000, rules)
summary(out)
```

If total revenue turnover plus other revenue

```{r}
rules <- validator(
  total.rev == turnover + other.rev
)

out <- confront(SBS2000, rules)
summary(out)
```

Is profit is at most 60% of total revenue.

```{r}
rules <- validator(
 profit <= 0.6 * total.rev 
)

out <- confront(SBS2000, rules)
summary(out)
```

In production use, it is good to save validation rules apart from the data handling, eg. R analysis code.

Let's create an external validation rule file, `rules.R` with the following content

```{r}
#| eval: false
turnover >= 0
staff >= 0
# profits can be negative (not for long...)
profit == total.rev - total.costs
```

```{r}
rules <- validator(.file="rules.R")
as.data.frame(rules)
```

Use names(rules) to set the id of the rules to BR01, BR02 and BR03.

```{r}
names(rules) <- c("BR01","BR02","BR03")
print(rules)
```

Use the label function to set the label of the third rule to “profit def”. Use print(rules) to see the differences.

```{r}
label(rules)[3] <- "profit def"
print(rules)
```

Export the rule set to `br.yml` in yaml format using export_yaml.

```{r}
validate::export_yaml(rules,"br.yml")
```

Open `br.yml` in RStudio (or another text editor) and copy the comments of the rules in into the descriptions of the yaml file.

Read the br.yml file into a validator object.

```{r}
rules <- validator(.file="br.yml")
print(as.data.frame(rules))
```

### Exercise 4

Install `validatedb` package.

```{r}
#| eval: false
#| echo: true
#library(remotes)
#remotes::install_github("data-cleaning/validatedb")
```

```{r}
library(validatedb)
library(DBI)
library(RSQLite)
# we are using a sqlite database in this demo library(RSQLite)
# connnect with the database file
con <- DBI::dbConnect(SQLite(), "code/SBS2000.db")
# retrieve a handle to the table "enterprise" in this database file.
enterprise <- validatedb::tbl(con, "enterprise")
print(enterprise)
```

Use confront to execute the rules on the database table and print and do a summary. Because of error in dplyr::union_all() this exercise cannot be done.

## Automating data quality measurement with lumberjack

```{r}
library(lumberjack)
```

Use the lbj_rules() logger to track changes in rule violations for the clean_supermarkets.R script. Use the rules in code/SBS2000_rules.R.

### Assignment 1

Open the file 'code/clean_supermarkets.R' and study it's contents. Can you (sort-of) understand what the script is meant for?

The file is for cleaning the supermarkets data.

```{r}
source("code/clean_supermarkets.R",chdir=TRUE)
```

Running the script created the clean dataset.

```{r}
inp <- read.csv("code/supermarkets.csv")
out <- read.csv("code/clean_supermarkets.csv")
st1 <- read.csv("code/step01.csv")
```

```{r}
diff <- cells(input=inp, step01 = st1,output = out)
diff
```

```{r}
barplot(diff)
```

We can see from the picture which approaches were used in the cleaning.

## Assigment 5

Inspecting how rule-satisfaction evolves.

```{r}
rules <- validator(.file="code/SBS2000_rules.R")
```

```{r}
cmp <- compare(rules, input=inp, step01=st1, output=out)
cmp
```

```{r}
plot(cmp)
```

## Assignment 6

Automating measurement with `lumberjack`.

* Uncomment the code under ASSIGNMENT 6, in clean_supermarkets.R

# 2. Run the file with lumberjack::run_file()
```{r}
library(lumberjack)
lumberjack:: run_file("code/clean_supermarkets.R")
```

```{r}
# read the logfiles
log_cellwise <- read.csv("code/dat_cellwise.csv")
log_rule <- read.csv("code/dat_lbj_rules.csv")
```

```{r}
dat_expression <- read.csv("code/dat_expression.csv")

```



## Managing data validation rules
